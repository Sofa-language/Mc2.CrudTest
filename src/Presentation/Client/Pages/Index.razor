@page "/"
@using Models
@using Services

@inject NavigationManager NavigationManager

<PageTitle>Customer Management</PageTitle>

<h1>Customer Management</h1>

<div class="row">
    <div class="col-sm-6">
        <button type="button" class="btn btn-primary" @onclick="CreateCustomer">New Customer</button>
    </div>
</div>

@if (_customers is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DeleteCustomerComponent Customer="@currentCustomer" OnClose="@OnDeleteModalClose">
    </DeleteCustomerComponent>

    <table class="table table-striped table-bordered table-hover">
        <thead class="table-dark">
        <th>Id</th>
        <th>First name</th>
        <th>Last name</th>
        <th>Email</th>
        <th>Phone number</th>
        <th>Bank account number</th>
        <th>Date of birth</th>
        <th></th>
        </thead>
        <tbody>
        @foreach (var customer in _customers!)
        {
            <tr>
                <td>@customer.Id</td>
                <td>@customer.Firstname</td>
                <td>@customer.Lastname</td>
                <td>@customer.Email</td>
                <td>@customer.PhoneNumber</td>
                <td>@customer.BankAccountNumber</td>
                <td>@customer.DateOfBirth!.Value.ToString("MM/dd/yyyy")</td>
                <td>

                    <button class="btn btn-primary" 
                            @onclick="() => EditCustomer(customer.Id!.Value)">
                                <i class="oi oi-pencil"></i>
                    </button>

                    <button class="btn btn-danger" 
                            data-bs-toggle="modal"
                            data-bs-target="#deleteModal"
                            @onclick="() => currentCustomer = customer">
                                <i class="oi oi-x"></i>
                    </button>
                </td>
            </tr>
        }  
        </tbody>
    </table>
}

@code
{
    private Customer[]? _customers;
    private Customer? currentCustomer;

    protected override async Task OnInitializedAsync()
    {
        var result = await CustomerService.GetCustomerListAsync();
        _customers = result;
    }

    private void CreateCustomer()
    {
        NavigationManager.NavigateTo("/customer");
    }

    private void EditCustomer(long id)
    {

        NavigationManager.NavigateTo($"/customer/{id}");
    }

    private void OnDeleteModalClose(bool accepted)
    {
        if (accepted)
        {
            CustomerService.DeleteCustomerAsync(currentCustomer!.Id!.Value).GetAwaiter().GetResult();
            _customers = CustomerService.GetCustomerListAsync().GetAwaiter().GetResult();
        }
    }
}
